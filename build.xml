<!-- Build EpochClockModel. It is also used by Hudson BEAST_II project. JUnit test is available for this build. -->
<project basedir="." default="build_jar_all_EpochClockModel" name="BUILD_EpochClockModel">
	<description>
	    Build EpochClockModel. 
            Also used by Hudson BEAST_II project. 
	    JUnit test is available for this build.
	    $Id: build_BEAST_II.xml $
	</description>

	<!-- set global properties for this build -->
	<property name="srcEpochClockModel" location="../EpochClockModel/src" />
	<property name="buildEpochClockModel" location="../EpochClockModel/build" />
	<property name="libEpochClockModel" location="../EpochClockModel/lib" />
	<property name="release_dir" value="release" />
	<property name="distEpochClockModel" location="${buildEpochClockModel}/dist" />
	<property name="beast2path" location="../beast2" />
	<property name="BeastFXpath" location="../BeastFX" />
	<property name="srcBeast2" location="${beast2path}/test" />
	<property name="beast2classpath" location="${beast2path}/build" />
	<property name="Add_on_dir" value="${release_dir}/add-on" />

	<!-- BEAST 2 currently uses Java 17 -->
	<property name="sourceVersion" value="17"/>
	<property name="targetVersion" value="17"/>


    <import file="${beast2path}/build.xml" />


	<property name="main_class_BEAST" value="beastfx.app.beast.BeastMain" />
	<property name="report" value="${buildEpochClockModel}/junitreport"/>

	<path id="classpath">
        <pathelement path="${buildEpochClockModel}"/>
		<fileset dir="${beast2path}/lib/junit" includes="junit-*.jar"/>
		<fileset dir="${beast2path}/lib" includes="*.jar"/>
		<fileset dir="${beast2path}/lib" includes="colt.jar"/>
        <pathelement path="${beast2classpath}"/>
        <pathelement path="${BeastFXpath}/build"/>
	</path>

	<!-- start -->
	<target name="initEpochClockModel">
		<echo message="${ant.project.name}: ${ant.file}" />
        <available file="./version.xml" property="versionAvailable"/>
        <fail unless="versionAvailable">
              ** Required file version.xml does not exist. **
        </fail>

        <!-- Read package name and version from xml file -->
        <xmlproperty file="./version.xml" prefix="fromVersionFile" />
        <property name="projName" value="${fromVersionFile.package(name)}" />
        <property name="projVersion" value="${fromVersionFile.package(version)}" />
        <property name="EpochClockModelVersion" value="${fromVersionFile.package(version)}" />
    </target>




	<target name="cleanEpochClockModel">
    	<delete dir="${buildEpochClockModel}" />
	</target>

	<!-- clean previous build, and then compile Java source code, and Juint test -->
	<target name="build_all_EpochClockModel" depends="cleanEpochClockModel,compile-allEpochClockModel,junitEpochClockModel"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- clean previous build, compile Java source code, and Junit test, and make the beast.jar and beauti.jar -->
	<target name="build_jar_all_EpochClockModel" depends="cleanEpochClockModel,compile-allEpochClockModel,junitEpochClockModel,dist_all_EpochClockModel"
        description="Clean and Build all run-time stuff">
	</target>


	<!-- No JUnit Test, clean previous build, compile Java source code, and make the EpochClockModel.jar and beauti.jar -->
	<target name="build_jar_all_EpochClockModel_NoJUnitTest" depends="cleanEpochClockModel,compile-allEpochClockModel,dist_all_EpochClockModel"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- compile Java source code -->
<!--
	<target name="compile-allEpochClockModel" depends="initEpochClockModel,compile-all">
-->	
	<target name="compile-allEpochClockModel" depends="initEpochClockModel">


	    <!-- Capture the path as a delimited property using the refid attribute -->
	    <property name="myclasspath" refid="classpath"/>
	    <!-- Emit the property to the ant console -->
	    <echo message="Classpath = ${myclasspath}"/>

		<mkdir dir="${buildEpochClockModel}" />

        <!-- add this if Zulu JDK not installed executable="../../Downloads/zulu17.36.13-ca-fx-jdk17.0.4-macosx_x64/zulu-17.jdk/Contents/Home/bin/javac" -->
		<!-- Compile the java code from ${srcEpochClockModel} into ${buildEpochClockModel} /bin -->
		<javac srcdir="${srcEpochClockModel}" destdir="${buildEpochClockModel}" classpathref="classpath"
			   target="${targetVersion}" source="${sourceVersion}"
			   fork="true" includeantruntime="false"
		       memoryinitialsize="256m"
		       memorymaximumsize="1024m">
			<include name="epochclock/**/**" />
			<!-- compile JUnit test classes -->
			<include name="test/beast/**" />
		</javac>
		<echo message="Successfully compiled." />
	</target>

	<!-- make the EpochClockModel.hjar and TreeAnnotator.jar -->
	<target name="dist_all_EpochClockModel" depends="compile-allEpochClockModel" description="create EpochClockModel jar">
		<!-- Create the distribution directory -->
		<mkdir dir="${distEpochClockModel}" />

		<jar jarfile="${distEpochClockModel}/EpochClockModel.v${EpochClockModelVersion}.src.jar">
			<fileset dir="${srcEpochClockModel}">
				<include name="epochclock/**/*.java" />
				<include name="test/**/*.java" />
			</fileset>
        </jar>
		<jar jarfile="${distEpochClockModel}/EpochClockModel.v${EpochClockModelVersion}.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
			<fileset dir="${buildEpochClockModel}">
				<include name="epochclock/**/*.class" />
			</fileset>
		</jar>
	</target>

	<!-- run beast.jar -->
	<target name="run_EpochClockModel">
		<java jar="${distEpochClockModel}/EpochClockModel.all.v${EpochClockModelVersion}.jar" fork="true" />
	</target>

	
	<!-- JUnit test -->
	<target name="junitEpochClockModel" depends="compile-allEpochClockModel">
		<mkdir dir="${report}" />
		<junit printsummary="yes"> <!--showoutput='yes'-->
			<classpath>
				<path refid="classpath" />
<!--				<path location="${buildEpochClockModel}" />-->
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${report}">
			<!-->
				<fileset dir="${srcEpochClockModel}">
                    <include name="test/**/*Test.java"/>
                    <exclude name="test/beast/integration/**/*Test.java"/>
				</fileset>
				-->
				<fileset dir="${srcBeast2}">
                    <include name="test/beast/integration/**/*Test.java"/>                                         
                    <exclude name="test/beast/integration/**/ResumeTest.java"/>                                         
                    <exclude name="test/beast/integration/**/ExampleXmlParsingTest.java"/>                                         
				</fileset>
			</batchtest>
		</junit>
		<echo message="JUnit test finished." />
	</target>
    
    <target name="junitreport">
		<junitreport todir="${report}">
			<fileset dir="${report}" includes="*.xml"/>
			<report format="frames" todir="${report}"/>
		</junitreport>
		<echo message="JUnit test report finished." />
	</target>

	<target name="addon" depends="package"/>
	
	<target name="package"
	        depends="build_jar_all_EpochClockModel_NoJUnitTest"
	        description="release BEAST 2 add-on version of EpochClockModel">
        <property name="fullName" value="${projName}.v${projVersion}"/>

		<delete dir="${Add_on_dir}" />
		<!-- Create the release directory -->
		<mkdir dir="${Add_on_dir}" />
		<mkdir dir="${Add_on_dir}/lib" />
		<mkdir dir="${Add_on_dir}/examples" />
		<mkdir dir="${Add_on_dir}/fxtemplates" />

		<copy todir="${Add_on_dir}">
			<fileset file="version.xml"/>
		</copy>
		<copy todir="${Add_on_dir}/examples">
			<fileset dir="examples" includes="*.xml">
			</fileset>
		</copy>

		<copy todir="${Add_on_dir}/lib">
			<fileset  file="${distEpochClockModel}/EpochClockModel.v${EpochClockModelVersion}.jar" />
		</copy>
		<copy todir="${Add_on_dir}">
			<fileset file="${distEpochClockModel}/EpochClockModel.v${EpochClockModelVersion}.src.jar" />
		</copy>
		<copy todir="${Add_on_dir}/fxtemplates">
			<fileset file="fxtemplates/EpochClockModel.xml" />
		</copy>
		<jar jarfile="${distEpochClockModel}/${fullName}.zip">
			<fileset dir="${Add_on_dir}">
				<include name="**/*" />
			</fileset>
        </jar>
		<echo message="Add-on version release is finished." />
	</target>


        <condition property="isWindows"><os family="windows" /></condition>
        <condition property="isLinux"><and><os family="unix"/><not><os family="mac"/></not></and></condition>
        <condition property="isMac"><os family="mac" /></condition>

        <target name="installLinux" depends="package" if="isLinux">
                <mkdir dir="${user.home}/.beast/2.7/${projName}"/>
                        <unzip src="${distEpochClockModel}/${fullName}.zip" dest="${user.home}/.beast/2.7/${projName}"/>
        </target>

        <target name="installMac" depends="package" if="isMac">
                <mkdir dir="${user.home}/.beast/2.7/${projName}"/>
                        <unzip src="${distEpochClockModel}/${fullName}.zip" dest="${user.home}/Library/Application Support/BEAST/2.7/${projName}"/>
        </target>

        <target name="installWindows" depends="package" if="isWindows">
                <mkdir dir="${user.home}/BEAST/2.7/${projName}"/>
                        <unzip src="${distEpochClockModel}/${fullName}.zip" dest="${user.home}/BEAST/2.7/${projName}"/>
        </target>

        <target name="install" depends="installWindows,installMac,installLinux">
        </target>



</project>
